-- Generated by generate_schema.py from app/db/models.py

CREATE TYPE "reconciliationstatus" AS ENUM ('RUNNING', 'SUCCEEDED', 'FAILED');

CREATE TYPE "userrank" AS ENUM ('ADMIN', 'USER', 'EXPIRED', 'WAITLIST');

CREATE TYPE "apikeystatus" AS ENUM ('ACTIVE', 'DISABLED', 'REVOKED');

CREATE TYPE "billingchannel" AS ENUM ('EMAIL', 'WEBHOOK');

CREATE TYPE "invoicestatus" AS ENUM ('DRAFT', 'OPEN', 'PAID', 'VOID');

CREATE TYPE "criterionappliesto" AS ENUM ('CHATBOT', 'RAG', 'AGENT', 'ALL');

CREATE TYPE "criterionmethod" AS ENUM ('EXACT_MATCH', 'CONTAINS', 'PROHIBITED', 'REGEX', 'SEMANTIC_SIMILARITY', 'JUDGE');

CREATE TYPE "filekind" AS ENUM ('DATASET_CSV', 'TUNE_JSONL', 'ARTIFACT', 'REPORT');

CREATE TYPE "filestatus" AS ENUM ('PENDING', 'UPLOADED', 'VALIDATED', 'FAILED');

CREATE TYPE "eventsource" AS ENUM ('CONSOLE', 'WORKER', 'INFERENCE');

CREATE TYPE "usagesource" AS ENUM ('EVAL', 'TUNE', 'DEPLOY');

CREATE TYPE "usagemetric" AS ENUM ('TOKENS_IN', 'TOKENS_OUT', 'JUDGE_TOKENS', 'TRAINING_MINUTES', 'STORAGE_GB_DAY', 'REQUESTS');

CREATE TYPE "usageunit" AS ENUM ('TOKENS', 'MINUTES', 'GB_DAY', 'REQUESTS');

CREATE TYPE "mode" AS ENUM ('CHATBOT', 'RAG', 'AGENT');

CREATE TYPE "provider" AS ENUM ('TOGETHER', 'OPENAI', 'ANTHROPIC', 'REGISTRY');

CREATE TYPE "jobstatus" AS ENUM ('QUEUED', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELED');

CREATE TYPE "evaltype" AS ENUM ('CRITERIA', 'ARENA', 'AB');

CREATE TYPE "deploymentstatus" AS ENUM ('CREATING', 'ACTIVE', 'PAUSED', 'FAILED', 'DELETING');

CREATE TYPE "inferenceroute" AS ENUM ('CHAT', 'COMPLETIONS', 'EMBEDDINGS', 'BATCH');

CREATE TABLE price_books (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	name VARCHAR NOT NULL, 
	valid_from TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	valid_to TIMESTAMP WITHOUT TIME ZONE, 
	PRIMARY KEY (id)
);

CREATE TABLE reconciliation_runs (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	started_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	finished_at TIMESTAMP WITHOUT TIME ZONE, 
	status reconciliationstatus NOT NULL, 
	provider VARCHAR, 
	meta JSON, 
	PRIMARY KEY (id)
);

CREATE TABLE stripe_webhook_events (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	type VARCHAR NOT NULL, 
	payload JSON NOT NULL, 
	received_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	PRIMARY KEY (id)
);

CREATE TABLE users (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	firebase_uid VARCHAR NOT NULL, 
	email VARCHAR NOT NULL, 
	name VARCHAR, 
	rank userrank NOT NULL, 
	deleted_at TIMESTAMP WITHOUT TIME ZONE, 
	PRIMARY KEY (id)
);

CREATE TABLE api_keys (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	name VARCHAR NOT NULL, 
	key_prefix VARCHAR NOT NULL, 
	key_hash VARCHAR NOT NULL, 
	scopes VARCHAR[], 
	quota JSON, 
	status apikeystatus NOT NULL, 
	expires_at TIMESTAMP WITHOUT TIME ZONE, 
	last_used_at TIMESTAMP WITHOUT TIME ZONE, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE billing_alerts (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	threshold_cents INTEGER NOT NULL, 
	channel billingchannel NOT NULL, 
	target VARCHAR NOT NULL, 
	active BOOLEAN NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE billing_invoices (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	stripe_invoice_id VARCHAR NOT NULL, 
	period_start TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	period_end TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	amount_due_cents INTEGER NOT NULL, 
	currency VARCHAR NOT NULL, 
	status invoicestatus NOT NULL, 
	hosted_invoice_url VARCHAR, 
	pdf_url VARCHAR, 
	invoice_metadata JSON, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE criterion_definitions (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	name VARCHAR NOT NULL, 
	applies_to criterionappliesto NOT NULL, 
	method criterionmethod NOT NULL, 
	config JSON NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE files (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	kind filekind NOT NULL, 
	storage_url VARCHAR NOT NULL, 
	bytes INTEGER, 
	sha256 VARCHAR, 
	status filestatus NOT NULL, 
	meta JSON, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE folders (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	name VARCHAR NOT NULL, 
	description VARCHAR, 
	parent_id UUID, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(parent_id) REFERENCES folders (id)
);

CREATE TABLE operation_events (
	id SERIAL NOT NULL, 
	user_id UUID NOT NULL, 
	source eventsource NOT NULL, 
	action VARCHAR NOT NULL, 
	ref_id VARCHAR, 
	meta JSON, 
	occurred_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE price_items (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	price_book_id UUID NOT NULL, 
	provider VARCHAR NOT NULL, 
	model VARCHAR NOT NULL, 
	metric VARCHAR NOT NULL, 
	unit VARCHAR NOT NULL, 
	price_per_unit_micros INTEGER NOT NULL, 
	currency VARCHAR NOT NULL, 
	effective_from TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	effective_to TIMESTAMP WITHOUT TIME ZONE, 
	meta JSON, 
	PRIMARY KEY (id), 
	FOREIGN KEY(price_book_id) REFERENCES price_books (id)
);

CREATE TABLE usage_events (
	id SERIAL NOT NULL, 
	user_id UUID NOT NULL, 
	source usagesource NOT NULL, 
	ref_id VARCHAR, 
	metric usagemetric NOT NULL, 
	quantity INTEGER NOT NULL, 
	unit usageunit NOT NULL, 
	cost_cents INTEGER NOT NULL, 
	stripe_invoice_item_id VARCHAR, 
	reconciled_at TIMESTAMP WITHOUT TIME ZONE, 
	occurred_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE user_sessions (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	device_label VARCHAR, 
	ip_hash VARCHAR, 
	user_agent_hash VARCHAR, 
	last_seen_at TIMESTAMP WITHOUT TIME ZONE, 
	revoked_at TIMESTAMP WITHOUT TIME ZONE, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE bookmarks (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	folder_id UUID, 
	title VARCHAR NOT NULL, 
	url VARCHAR NOT NULL, 
	description VARCHAR, 
	tags VARCHAR[], 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(folder_id) REFERENCES folders (id)
);

CREATE TABLE datasets (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	file_id UUID NOT NULL, 
	name VARCHAR NOT NULL, 
	mode mode NOT NULL, 
	data_schema JSON NOT NULL, 
	rows_estimate INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(file_id) REFERENCES files (id)
);

CREATE TABLE reconciliation_adjustments (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	run_id UUID NOT NULL, 
	usage_event_id INTEGER, 
	delta_cost_cents INTEGER NOT NULL, 
	reason VARCHAR NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(run_id) REFERENCES reconciliation_runs (id), 
	FOREIGN KEY(usage_event_id) REFERENCES usage_events (id)
);

CREATE TABLE tune_jobs (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	provider provider NOT NULL, 
	base_model VARCHAR NOT NULL, 
	config JSON NOT NULL, 
	dataset_file_id UUID NOT NULL, 
	provider_job_id VARCHAR, 
	status jobstatus NOT NULL, 
	artifacts JSON, 
	metrics JSON, 
	cost_cents INTEGER NOT NULL, 
	started_at TIMESTAMP WITHOUT TIME ZONE, 
	finished_at TIMESTAMP WITHOUT TIME ZONE, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(dataset_file_id) REFERENCES files (id)
);

CREATE TABLE eval_runs (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	model_ref VARCHAR NOT NULL, 
	dataset_id UUID NOT NULL, 
	eval_type evaltype NOT NULL, 
	mode mode NOT NULL, 
	status jobstatus NOT NULL, 
	selected_criteria JSON NOT NULL, 
	totals JSON, 
	token_usage JSON, 
	cost_cents INTEGER NOT NULL, 
	started_at TIMESTAMP WITHOUT TIME ZONE, 
	finished_at TIMESTAMP WITHOUT TIME ZONE, 
	report_file_id UUID, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(dataset_id) REFERENCES datasets (id), 
	FOREIGN KEY(report_file_id) REFERENCES files (id)
);

CREATE TABLE models (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	name VARCHAR NOT NULL, 
	provider provider NOT NULL, 
	external_model_id VARCHAR, 
	created_from_tune UUID, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(created_from_tune) REFERENCES tune_jobs (id)
);

CREATE TABLE eval_row_results (
	id SERIAL NOT NULL, 
	run_id UUID NOT NULL, 
	row_index INTEGER NOT NULL, 
	input_json JSON NOT NULL, 
	output_json JSON NOT NULL, 
	judgments JSON NOT NULL, 
	tokens_in INTEGER, 
	tokens_out INTEGER, 
	cost_cents INTEGER, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(run_id) REFERENCES eval_runs (id)
);

CREATE TABLE model_versions (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	model_id UUID NOT NULL, 
	version VARCHAR NOT NULL, 
	artifact_file_id UUID, 
	card JSON, 
	PRIMARY KEY (id), 
	FOREIGN KEY(model_id) REFERENCES models (id), 
	FOREIGN KEY(artifact_file_id) REFERENCES files (id)
);

CREATE TABLE deployments (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	user_id UUID NOT NULL, 
	model_version_id UUID NOT NULL, 
	status deploymentstatus NOT NULL, 
	autoscale JSON, 
	config JSON, 
	endpoint_slug VARCHAR NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(model_version_id) REFERENCES model_versions (id)
);

CREATE TABLE inference_requests (
	id UUID NOT NULL, 
	created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	deployment_id UUID, 
	api_key_id UUID, 
	model_ref VARCHAR NOT NULL, 
	route inferenceroute NOT NULL, 
	status_code INTEGER NOT NULL, 
	error_code VARCHAR, 
	latency_ms INTEGER, 
	tokens_in INTEGER, 
	tokens_out INTEGER, 
	cost_cents INTEGER, 
	meta JSON, 
	PRIMARY KEY (id), 
	FOREIGN KEY(deployment_id) REFERENCES deployments (id), 
	FOREIGN KEY(api_key_id) REFERENCES api_keys (id)
);

CREATE TABLE inference_bodies (
	request_id UUID NOT NULL, 
	prompt_sample VARCHAR, 
	response_sample VARCHAR, 
	PRIMARY KEY (request_id), 
	FOREIGN KEY(request_id) REFERENCES inference_requests (id)
);
